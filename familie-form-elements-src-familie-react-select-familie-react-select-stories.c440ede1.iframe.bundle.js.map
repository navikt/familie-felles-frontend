{"version":3,"file":"familie-form-elements-src-familie-react-select-familie-react-select-stories.c440ede1.iframe.bundle.js","mappings":";;AA+BA;;AA0EA","sources":["webpack://familie-felles-frontend/./packages/familie-form-elements/src/familie-react-select/FamilieReactSelect.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport ReactSelect, { GroupBase, Props, StylesConfig } from 'react-select';\nimport Creatable from 'react-select/creatable';\nimport styled from 'styled-components';\nimport {\n    ASurfaceDanger,\n    ASurfaceActionHover,\n    ABorderStrong,\n    ABorderFocus,\n    ATextDefault,\n    ATextSubtle,\n    ATextOnInverted,\n    ABlue100,\n    ABlue500,\n} from '@navikt/ds-tokens/dist/tokens';\nimport { ErrorMessage, Label, omit } from '@navikt/ds-react';\n\nexport interface IProps {\n    erLesevisning?: boolean;\n    creatable?: boolean;\n    label: ReactNode;\n    feil?: ReactNode;\n    propSelectStyles?: StylesConfig<ISelectOption, boolean, GroupBase<ISelectOption>>;\n    className?: string;\n}\n\nconst Container = styled.div`\n    margin-bottom: 1rem;\n`;\n\nconst navSelectStyles = (\n    feil?: ReactNode,\n    erLesevisning?: boolean,\n): StylesConfig<ISelectOption, boolean, GroupBase<ISelectOption>> => ({\n    control: (provided, state) => ({\n        ...provided,\n        border:\n            feil && !state.isFocused ? `1px solid ${ASurfaceDanger}` : `1px solid ${ABorderStrong}`,\n        borderRadius: '4px',\n        boxShadow: state.isFocused\n            ? `0 0 0 3px ${ABorderFocus}`\n            : feil\n              ? `0 0 0 1px ${ASurfaceDanger}`\n              : '',\n        ':hover': {\n            border: `1px solid ${ASurfaceActionHover}`,\n        },\n    }),\n    placeholder: provided => ({\n        ...provided,\n        color: ATextSubtle,\n    }),\n    dropdownIndicator: provided =>\n        erLesevisning\n            ? { display: 'none' }\n            : {\n                  ...provided,\n                  color: 'initial',\n                  ':hover': {\n                      color: 'initial',\n                  },\n              },\n    clearIndicator: provided =>\n        erLesevisning\n            ? { display: 'none' }\n            : {\n                  ...provided,\n                  color: ATextSubtle,\n                  ':hover': {\n                      color: ATextDefault,\n                  },\n              },\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    multiValue: (provided, _) => ({\n        ...provided,\n        backgroundColor: ABlue100,\n        maxWidth: '18rem',\n    }),\n    multiValueRemove: provided =>\n        erLesevisning\n            ? { display: 'none' }\n            : {\n                  ...provided,\n                  ':hover': {\n                      backgroundColor: ABlue500,\n                      color: ATextOnInverted,\n                  },\n              },\n});\n\nconst StyledFeilmelding = styled(ErrorMessage)`\n    margin-top: 0.5rem;\n`;\n\nexport type OptionType = {\n    value: string;\n    label: string;\n};\n\nexport interface ISelectOption extends OptionType {\n    value: string;\n    label: string;\n}\n\nexport const FamilieReactSelect: React.FC<\n    IProps | Props<ISelectOption, boolean, GroupBase<ISelectOption>>\n> = ({\n    erLesevisning,\n    creatable = false,\n    label,\n    value,\n    feil,\n    propSelectStyles,\n    className,\n    ...props\n}) => {\n    const propsWithoutStyles = omit(props, ['styles']);\n\n    const id = `react-select-${label}`;\n    const stylesCombined: StylesConfig<ISelectOption, boolean, GroupBase<ISelectOption>> = {\n        ...navSelectStyles(feil, erLesevisning),\n        ...propSelectStyles,\n    };\n\n    return (\n        <Container className={className}>\n            {typeof label === 'string' ? (\n                <label htmlFor={id}>\n                    <Label size={'small'} spacing={true}>\n                        {label}\n                    </Label>\n                </label>\n            ) : (\n                label\n            )}\n            {creatable ? (\n                <Creatable\n                    formatCreateLabel={() => `Opprett`}\n                    styles={stylesCombined}\n                    id={id}\n                    isDisabled={erLesevisning}\n                    isClearable={!erLesevisning}\n                    value={value}\n                    placeholder={'Velg'}\n                    noOptionsMessage={() => 'Ingen valg'}\n                    {...propsWithoutStyles}\n                />\n            ) : (\n                <ReactSelect\n                    styles={stylesCombined}\n                    id={id}\n                    isDisabled={erLesevisning}\n                    isClearable={!erLesevisning}\n                    value={value}\n                    placeholder={'Velg'}\n                    noOptionsMessage={() => 'Ingen valg'}\n                    {...propsWithoutStyles}\n                />\n            )}\n\n            {feil && <StyledFeilmelding size={'small'}>{feil}</StyledFeilmelding>}\n        </Container>\n    );\n};\n"],"names":[],"sourceRoot":""}