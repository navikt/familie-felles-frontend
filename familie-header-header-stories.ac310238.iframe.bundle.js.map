{"version":3,"file":"familie-header-header-stories.ac310238.iframe.bundle.js","mappings":";;;;AA6BA;;;AAGA;;;;;;;AASA;;;;;;;;;;;AAaA;;;AAsEA;;ACvDA;;;;;;;ACpCA","sources":["webpack://familie-felles-frontend/./packages/familie-header/src/søk/Søkeresultat.tsx","webpack://familie-felles-frontend/./packages/familie-header/src/søk/Søkeresultater.tsx","webpack://familie-felles-frontend/./packages/familie-header/src/søk/Søk.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport styled from 'styled-components';\nimport { adressebeskyttelsestyper } from '@navikt/familie-typer';\n\nimport { inputId } from '.';\nimport { ISøkeresultat } from '..';\nimport { formaterPersonIdent } from './formatter';\nimport { StyledAlertStripe } from './Søkeresultater';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    formaterResultat?: (\n        søkeresultat: ISøkeresultat,\n        erSøkeresultatValgt: boolean,\n    ) => React.ReactNode;\n    søkeresultatOnClick: (søkResultat: ISøkeresultat) => void;\n    søkeresultater: ISøkeresultat[];\n    valgtSøkeresultat: number;\n    settValgtSøkeresultat: (søkeresultatIndex: number) => void;\n    ingenFagsakKomponent?: ReactNode;\n}\n\nconst ResultatListe = styled.ul`\n    width: 20rem;\n    padding: 0;\n    margin: 0;\n`;\n\nconst ResultatListeElement = styled.li<{ $fokus: boolean }>`\n    list-style-type: none;\n    padding: 0.5rem;\n    outline: ${({ $fokus }) => ($fokus ? `3px solid var(--a-orange-300)` : '')};\n    border-radius: 8px;\n\n    &:hover {\n        background-color: var(--a-gray-100);\n        cursor: pointer;\n    }\n`;\n\nconst ResultatIkonOgRolle = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding-right: 1rem;\n    align-items: center;\n    min-width: 3.5rem;\n    font-size: var(--a-font-size-small);\n\n    svg {\n        text-align: center;\n    }\n`;\n\nconst ResultatListeElementKnapp = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst Søkeresultat: React.FC<Props> = ({\n    formaterResultat,\n    settValgtSøkeresultat,\n    søkeresultatOnClick,\n    søkeresultater,\n    valgtSøkeresultat,\n    ingenFagsakKomponent,\n}) => {\n    return søkeresultater.length > 0 ? (\n        <ResultatListe aria-labelledby={inputId}>\n            {søkeresultater.map((søkeresultat: ISøkeresultat, index: number) => {\n                if (formaterResultat) {\n                    return formaterResultat(søkeresultat, index === valgtSøkeresultat);\n                } else {\n                    return (\n                        <ResultatListeElement key={index} $fokus={index === valgtSøkeresultat}>\n                            <ResultatListeElementKnapp\n                                aria-label={\n                                    søkeresultat.harTilgang\n                                        ? søkeresultat.navn\n                                        : 'Person har diskresjonskode'\n                                }\n                                aria-selected={index === valgtSøkeresultat}\n                                role={'option'}\n                                onClick={() => {\n                                    søkeresultatOnClick(søkeresultat);\n                                    settValgtSøkeresultat(index);\n                                }}\n                            >\n                                <ResultatIkonOgRolle>\n                                    {søkeresultat.ikon}\n                                    {søkeresultat.rolle ? søkeresultat.rolle : ''}\n                                </ResultatIkonOgRolle>\n                                <div>\n                                    <BodyShort size={'small'}>\n                                        {søkeresultat.harTilgang\n                                            ? `${søkeresultat.navn} (${formaterPersonIdent(\n                                                  søkeresultat.ident,\n                                              )})`\n                                            : `Personen har diskresjonskode ${\n                                                  søkeresultat.adressebeskyttelseGradering\n                                                      ? adressebeskyttelsestyper[\n                                                            søkeresultat.adressebeskyttelseGradering\n                                                        ]\n                                                      : 'ukjent'\n                                              }`}\n                                    </BodyShort>\n\n                                    {!søkeresultat.fagsakId && søkeresultat.harTilgang && (\n                                        <ResultatVisningUtenFagsak\n                                            ingenFagsakKomponent={ingenFagsakKomponent}\n                                        />\n                                    )}\n                                </div>\n                            </ResultatListeElementKnapp>\n                        </ResultatListeElement>\n                    );\n                }\n            })}\n        </ResultatListe>\n    ) : (\n        <StyledAlertStripe variant={'info'}>Beklager, ingen treff</StyledAlertStripe>\n    );\n};\n\nconst ResultatVisningUtenFagsak: React.FC<{ ingenFagsakKomponent?: ReactNode }> = ({\n    ingenFagsakKomponent,\n}) => {\n    if (ingenFagsakKomponent) {\n        return <>ingenFagsakKomponent</>;\n    }\n\n    return <BodyShort size={'small'}>{`Ingen fagsak. Trykk for å opprette.`}</BodyShort>;\n};\n\nexport default Søkeresultat;\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { Ressurs, RessursStatus } from '@navikt/familie-typer';\nimport { inputId } from '.';\nimport { ISøkeresultat } from '../types';\nimport Søkeresultat from './Søkeresultat';\nimport { Alert, BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    formaterResultat?: (\n        søkeresultat: ISøkeresultat,\n        erSøkeresultatValgt: boolean,\n    ) => React.ReactNode;\n    søkeresultatOnClick: (søkResultat: ISøkeresultat) => void;\n    søkeresultater: Ressurs<ISøkeresultat[]>;\n    valgtSøkeresultat: number;\n    settValgtSøkeresultat: (søkeresultatIndex: number) => void;\n    ingenFagsakKomponent?: ReactNode;\n}\n\nexport const StyledAlertStripe = styled(Alert)`\n    width: 20rem;\n`;\n\nconst Søkeresultater: React.FC<Props> = ({\n    formaterResultat,\n    settValgtSøkeresultat,\n    søkeresultatOnClick,\n    søkeresultater,\n    valgtSøkeresultat,\n    ingenFagsakKomponent,\n}) => {\n    switch (søkeresultater.status) {\n        case RessursStatus.SUKSESS:\n            return (\n                <Søkeresultat\n                    søkeresultater={søkeresultater.data}\n                    valgtSøkeresultat={valgtSøkeresultat}\n                    settValgtSøkeresultat={settValgtSøkeresultat}\n                    formaterResultat={formaterResultat}\n                    søkeresultatOnClick={søkeresultatOnClick}\n                    ingenFagsakKomponent={ingenFagsakKomponent}\n                />\n            );\n        case RessursStatus.FEILET:\n        case RessursStatus.FUNKSJONELL_FEIL:\n        case RessursStatus.IKKE_TILGANG:\n            return (\n                <StyledAlertStripe aria-labelledby={inputId} variant=\"error\">\n                    <BodyShort size={'small'}>{søkeresultater.frontendFeilmelding}</BodyShort>\n                </StyledAlertStripe>\n            );\n        case RessursStatus.HENTER:\n            return (\n                <StyledAlertStripe aria-labelledby={inputId} variant={'info'}>\n                    <BodyShort size={'small'}>Søker...</BodyShort>\n                </StyledAlertStripe>\n            );\n        default:\n            return (\n                <StyledAlertStripe aria-labelledby={inputId} variant={'info'}>\n                    <BodyShort size={'small'}>\n                        Tast inn fødselsnummer eller d-nummer. Trykk 'enter' for å søke.\n                    </BodyShort>\n                </StyledAlertStripe>\n            );\n    }\n};\n\nexport default Søkeresultater;\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport '@navikt/ds-css';\nimport { Ressurs, RessursStatus } from '@navikt/familie-typer/dist';\nimport Søkeresultater from './Søkeresultater';\nimport { ISøkeresultat } from '../types';\nimport useSøk from './useSøk';\nimport { FnrInputWrapper } from './FnrInputWrapper';\nimport { Popover } from '@navikt/ds-react';\n\nexport interface SøkProps {\n    formaterResultat?: (\n        søkeresultat: ISøkeresultat,\n        erSøkeresultatValgt: boolean,\n    ) => React.ReactNode;\n    label: string;\n    nullstillSøkeresultater: () => void;\n    søk: (value: string) => void;\n    søkeresultater: Ressurs<ISøkeresultat[]>;\n    søkeresultatOnClick: (søkResultat: ISøkeresultat) => void;\n    placeholder?: string;\n    size?: 'small' | 'medium';\n    ingenFagsakKomponent?: ReactNode;\n}\n\nconst SøkContainer = styled.div`\n    align-self: center;\n    padding-left: 1.25rem;\n    padding-right: 1.25rem;\n    .navds-body-small {\n        font-size: var(--a-font-size-medium);\n    }\n`;\nexport const inputId = 'sok-input';\nexport const søkKnappId = 'søk-knapp';\nexport const tømKnappId = 'tøm-knapp';\n\nexport const Søk = ({\n    formaterResultat,\n    nullstillSøkeresultater,\n    søk,\n    søkeresultatOnClick,\n    søkeresultater,\n    placeholder,\n    label,\n    size = 'small',\n    ingenFagsakKomponent,\n}: SøkProps) => {\n    const {\n        ankerRef,\n        ident,\n        nullstillInput,\n        onInputChange,\n        onInputKeyDown,\n        settErGyldig,\n        settValgtSøkeresultat,\n        utløserSøk,\n        valgtSøkeresultat,\n    } = useSøk({\n        nullstillSøkeresultater,\n        søk,\n        søkeresultatOnClick,\n        søkeresultater,\n    });\n\n    return (\n        <>\n            <SøkContainer title={'søk'} data-theme=\"dark\">\n                <FnrInputWrapper\n                    id={inputId}\n                    laster={søkeresultater.status === RessursStatus.HENTER}\n                    placeholder={placeholder}\n                    label={label}\n                    onEndre={onInputChange}\n                    onKeyDown={onInputKeyDown}\n                    onValidate={(isValid: boolean) => settErGyldig(isValid)}\n                    value={ident}\n                    utløserSøk={utløserSøk}\n                    size={size}\n                    onClear={() => {\n                        nullstillInput(true);\n                    }}\n                />\n            </SøkContainer>\n\n            {ankerRef.current && (\n                <Popover\n                    id={'søkeresultat'}\n                    anchorEl={ankerRef.current}\n                    arrow={false}\n                    placement=\"bottom\"\n                    tabIndex={-1}\n                    open={true}\n                    onClose={() => {\n                        return;\n                    }}\n                >\n                    <Popover.Content\n                        style={{\n                            padding: '0px',\n                        }}\n                    >\n                        <Søkeresultater\n                            formaterResultat={formaterResultat}\n                            settValgtSøkeresultat={søkeresultatIndex =>\n                                settValgtSøkeresultat(søkeresultatIndex)\n                            }\n                            søkeresultatOnClick={søkeresultatOnClick}\n                            søkeresultater={søkeresultater}\n                            valgtSøkeresultat={valgtSøkeresultat}\n                            ingenFagsakKomponent={ingenFagsakKomponent}\n                        />\n                    </Popover.Content>\n                </Popover>\n            )}\n        </>\n    );\n};\n"],"names":[],"sourceRoot":""}