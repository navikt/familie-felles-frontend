{"version":3,"file":"10.5d1c3b87.iframe.bundle.js","mappings":";;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;;;;;;;;;;AAWA;AACA;;;AAKA;;AAEA;AACA;AAGA;AACA;AAUA;;;;;AC2CA;;;;;AAKA;;AAWA;;AChIA;;;AAGA;AACA;;;;AAIA;;;;;;;;;;;;;;;AAeA;AACA;AACA;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmCA;;;;;;;;;;;;;;;;AAgBA;;;AAQA;AACA;;;;;;AAMA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAGA;AACA;AACA;AA0BA;;AC9KA;;;;AAIA;AAGA;;AAEA;;;AAGA;AACA;;;AAGA;;AAkBA;;;AClCA;;;;AAmBA;;;;;;;;;;;;;;;AAeA;;;;AAMA;;;AAYA;;ACLA;AACA;;;;AASA;;;AAGA;;;;AAIA;;AAIA;;;;AAoBA","sources":["webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/AktivtUtsnitt.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/AxisLabels.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/Tooltip.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/TimelinePeriod.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/TimelineRow.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/Pins.tsx","webpack://familie-felles-frontend/./packages/familie-tidslinje/src/components/tidslinje/Tidslinje.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { Dayjs } from 'dayjs';\nimport { EnkelPeriode } from '../types.external';\nimport { usePositionAndSize } from './usePositionAndSize';\nimport { ABlue50, ABlue500 } from '@navikt/ds-tokens/dist/tokens';\n\nconst AktivtUtsnittContainer = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    height: 100%;\n    width: 100%;\n    user-select: none;\n    pointer-events: none;\n`;\n\nconst AktivPeriode = styled.div`\n    position: absolute;\n    height: 100%;\n    border: none;\n    background: none;\n    padding: 0;\n\n    &::-moz-focus-inner {\n        border: 0;\n    }\n\n    &:hover,\n    &:focus {\n        outline: none;\n    }\n\n    &:before {\n        content: '';\n        position: absolute;\n        top: -2px;\n        width: 3px;\n        height: 3px;\n        border-radius: 50%;\n        background: ${ABlue500};\n        box-shadow: 0 0 0 1px ${ABlue500};\n        left: -1px;\n    }\n\n    &:after {\n        content: '';\n        position: absolute;\n        top: -2px;\n        width: 3px;\n        height: 3px;\n        border-radius: 50%;\n        background: ${ABlue500};\n        box-shadow: 0 0 0 1px ${ABlue500};\n        right: -1px;\n    }\n`;\n\nconst AktivPeriodeBorder = styled(AktivPeriode)`\n    box-shadow:\n        inset 2px 0 0 -1px ${ABlue500},\n        inset -2px 0 0 -1px ${ABlue500};\n`;\n\nconst AktivPeriodeBakgrunn = styled(AktivPeriode)`\n    background: ${ABlue50};\n`;\n\ninterface IntervallProps {\n    tidslinjestart: Dayjs;\n    tidslinjeslutt: Dayjs;\n    aktivtUtsnitt: EnkelPeriode;\n    direction: 'left' | 'right';\n}\n\nexport const AktivtUtsnittBorder = ({\n    aktivtUtsnitt,\n    tidslinjestart,\n    tidslinjeslutt,\n    direction,\n}: IntervallProps) => {\n    const style = usePositionAndSize({\n        periode: aktivtUtsnitt,\n        tidslinjestart,\n        tidslinjeslutt,\n        direction,\n    });\n    return (\n        <AktivtUtsnittContainer className={'aktivtUtsnittContainer'}>\n            <AktivPeriodeBorder className={classNames('aktivPeriodeBorder')} style={style} />\n        </AktivtUtsnittContainer>\n    );\n};\n\nexport const AktivtUtsnittBakgrunn = ({\n    aktivtUtsnitt,\n    tidslinjestart,\n    tidslinjeslutt,\n    direction,\n}: IntervallProps) => {\n    const style = usePositionAndSize({\n        periode: aktivtUtsnitt,\n        tidslinjestart,\n        tidslinjeslutt,\n        direction,\n    });\n    return (\n        <AktivtUtsnittContainer className={'aktivtUtsnittContainer'}>\n            <AktivPeriodeBakgrunn className={classNames('aktivPeriodeBakgrunn')} style={style} />\n        </AktivtUtsnittContainer>\n    );\n};\n","import React, { ReactNode } from 'react';\nimport dayjs, { Dayjs } from 'dayjs';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { erSynlig } from './filter';\nimport { horizontalPositionAndWidth } from './calc';\nimport { AxisLabel } from '../types.internal';\nimport 'dayjs/locale/nb';\nimport { AGray600, ASpacing4 } from '@navikt/ds-tokens/dist/tokens';\n\ndayjs.locale('nb');\n\nconst formatertDag = (dato: Dayjs): string => dato.format('DD.MM');\n\nconst formatertMåned = (dato: Dayjs): string => {\n    const månedLabel = dato.format('MMM');\n    return månedLabel[0].toUpperCase().concat(månedLabel.slice(1, 3));\n};\n\nconst formatertÅr = (dato: Dayjs): string => `${dato.year()}`;\n\nexport const dagsetiketter = (\n    start: Dayjs,\n    slutt: Dayjs,\n    totaltAntallDager: number,\n    direction: 'left' | 'right',\n): AxisLabel[] => {\n    const inkrement = Math.ceil(totaltAntallDager / 10);\n    const sisteDag = slutt.startOf('day');\n    return new Array(totaltAntallDager)\n        .fill(sisteDag)\n        .map((denneDagen, i) => {\n            if (i % inkrement !== 0) return null;\n            const dag: Dayjs = denneDagen.subtract(i, 'day');\n            const { horizontalPosition, width } = horizontalPositionAndWidth(\n                dag,\n                dag.add(1, 'day'),\n                start,\n                slutt,\n            );\n            return {\n                direction: direction,\n                horizontalPosition: horizontalPosition,\n                label: formatertDag(dag),\n                date: dag.toDate(),\n                width: width,\n            };\n        })\n        .filter(etikett => etikett !== null) as AxisLabel[];\n};\n\nexport const månedsetiketter = (\n    start: Dayjs,\n    slutt: Dayjs,\n    direction: 'left' | 'right',\n): AxisLabel[] => {\n    const startmåned = start.startOf('month');\n    const sluttmåned = slutt.endOf('month');\n    const antallMåneder = sluttmåned.diff(startmåned, 'month') + 1;\n    return new Array(antallMåneder).fill(startmåned).map((denneMåneden, i) => {\n        const måned: Dayjs = denneMåneden.add(i, 'month');\n        const { horizontalPosition, width } = horizontalPositionAndWidth(\n            måned,\n            måned.add(1, 'month'),\n            start,\n            slutt,\n        );\n        return {\n            direction: direction,\n            horizontalPosition: horizontalPosition,\n            label: formatertMåned(måned),\n            date: måned.toDate(),\n            width: width,\n        };\n    });\n};\n\nexport const årsetiketter = (\n    start: Dayjs,\n    slutt: Dayjs,\n    direction: 'left' | 'right',\n): AxisLabel[] => {\n    const førsteÅr = start.startOf('year');\n    const sisteÅr = slutt.endOf('year');\n    const antallÅr = sisteÅr.diff(start, 'year') + 1;\n    return new Array(antallÅr).fill(førsteÅr).map((detteÅret, i) => {\n        const år: Dayjs = detteÅret.add(i, 'year');\n        const { horizontalPosition, width } = horizontalPositionAndWidth(\n            år,\n            år.add(1, 'year'),\n            start,\n            slutt,\n        );\n        return {\n            direction: direction,\n            horizontalPosition: horizontalPosition,\n            label: formatertÅr(år),\n            date: år.toDate(),\n            width: width,\n        };\n    });\n};\n\nconst axisLabels = (start: Dayjs, slutt: Dayjs, direction: 'left' | 'right'): AxisLabel[] => {\n    const totaltAntallDager = slutt.diff(start, 'day');\n    if (totaltAntallDager < 40) {\n        return dagsetiketter(start, slutt, totaltAntallDager, direction);\n    } else if (totaltAntallDager < 370) {\n        return månedsetiketter(start, slutt, direction);\n    } else {\n        return årsetiketter(start, slutt, direction);\n    }\n};\n\nconst Etiketter = styled.div`\n    position: relative;\n    width: 100%;\n    height: 1rem;\n    box-sizing: content-box;\n    margin-bottom: ${ASpacing4};\n\n    > * {\n        position: absolute;\n        font-size: 0.8rem;\n        color: ${AGray600};\n    }\n`;\n\ninterface AxisLabelsProps {\n    start: Dayjs;\n    slutt: Dayjs;\n    direction?: 'left' | 'right';\n    etikettRender?: (etikett: AxisLabel) => ReactNode;\n}\n\nexport const AxisLabels = ({\n    start,\n    slutt,\n    direction = 'left',\n    etikettRender,\n}: AxisLabelsProps) => {\n    const labels = axisLabels(start, slutt, direction).filter(erSynlig);\n    return (\n        <Etiketter className={classNames('etiketter')}>\n            {labels.map(etikett => (\n                <div\n                    key={etikett.label}\n                    style={{\n                        display: 'flex',\n                        justifyContent: direction === 'left' ? 'flex-start' : 'flex-end',\n                        [direction]: `${etikett.horizontalPosition}%`,\n                        width: `${etikett.width}%`,\n                    }}\n                >\n                    {etikettRender?.(etikett) ?? etikett.label}\n                </div>\n            ))}\n        </Etiketter>\n    );\n};\n","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport { AGray400, AGray600, AGray800, ASpacing2, ASpacing4 } from '@navikt/ds-tokens/dist/tokens';\n\nconst TooltipContainer = styled.div`\n    position: absolute;\n    padding: ${ASpacing2} ${ASpacing4};\n    background: #ffffff;\n    border-radius: 4px;\n    border: 1px solid ${AGray600};\n    color: ${AGray800};\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%) translateY(calc(-100% - 10px));\n    box-shadow: 0 2px 2px 0 ${AGray400};\n    animation-timing-function: ease-out;\n    animation-duration: 0.05s;\n    animation-name: fadeIn;\n    cursor: default;\n    z-index: 1000;\n\n    &:before {\n        content: '';\n        position: absolute;\n        width: 10px;\n        height: 10px;\n        background: #ffffff;\n        left: 50%;\n        bottom: -1px;\n        border-bottom: 1px solid ${AGray600};\n        border-right: 1px solid ${AGray600};\n        box-shadow: 2px 2px 2px ${AGray400};\n        transform: translateX(-50%) translateY(50%) rotate(45deg);\n    }\n\n    &:after {\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 12px;\n        background: transparent;\n        bottom: -12px;\n        left: 0;\n    }\n`;\n\ninterface TooltipProps {\n    children: ReactNode | ReactNode[];\n    className?: string;\n}\n\nexport const Tooltip = ({ children, className }: TooltipProps) => (\n    <TooltipContainer className={classNames(className)}>{children}</TooltipContainer>\n);\n","import React, {\n    CSSProperties,\n    ReactNode,\n    RefObject,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from './Tooltip';\nimport { PositionedPeriod } from '../types.internal';\nimport styled, { css } from 'styled-components';\n\nconst fellesPeriodeStyle = css`\n    background: #e7e9e9;\n    border-top: 1px solid #59514b;\n    border-bottom: 1px solid #59514b;\n\n    border-radius: 1.5rem;\n    position: absolute;\n    transition: box-shadow 0.1s ease;\n    padding: 0;\n\n    &.mini {\n        min-width: 0;\n        padding: 0;\n        &:before {\n            display: none;\n        }\n    }\n    &.mini:before {\n        display: none;\n    }\n\n    &.advarsel {\n        background: #ffe9cc;\n        border: 1px solid #ff9100;\n    }\n\n    &.feil {\n        background: #f1d8d4;\n        border: 1px solid #ba3a26;\n    }\n\n    &.inaktiv {\n        background: #e7e9e9;\n        border: 1px solid #78706a;\n    }\n\n    &.suksess {\n        background: #cde7d8;\n        border: 1px solid #117938;\n    }\n\n    &.sammenhengendeFraHøyre {\n        border-bottom-right-radius: 0;\n        border-top-right-radius: 0;\n    }\n\n    &.sammenhengendeFraVenstre {\n        border-bottom-left-radius: 0;\n        border-top-left-radius: 0;\n    }\n\n    &.sammenhengendeFraBegge {\n        border-bottom-right-radius: 0;\n        border-top-right-radius: 0;\n        border-bottom-left-radius: 0;\n        border-top-left-radius: 0;\n    }\n\n    &.croppedHøyre {\n        border-right: none;\n    }\n\n    &.croppedVenstre {\n        border-left: none;\n    }\n\n    &.croppedBegge {\n        border-left: none;\n        border-right: none;\n    }\n`;\ninterface InfoPinProps {\n    $påPeriodeKnapp?: boolean;\n}\nconst InfoPin = styled.div<InfoPinProps>`\n    position: absolute;\n    background: #0067c5;\n    height: 6px;\n    width: 2px;\n    top: 0;\n    left: 50%;\n    transform: translate(-1px, -7px);\n\n    &:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        width: 10px;\n        height: 10px;\n        background: #0067c5;\n        transform: ${props => `translate(-${props.$påPeriodeKnapp ? 5 : 4}px, -100%)`};\n        border-radius: 50%;\n    }\n`;\n\ninterface PeriodeInnholdProps {\n    $kompakt?: boolean;\n}\nconst PeriodeInnhold = styled.div<PeriodeInnholdProps>`\n    margin: ${props => `${props.$kompakt ? 0 : 0.3}rem 0.3rem`};\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: clip;\n    text-align: left;\n    position: relative;\n    top: ${props => `${props.$kompakt ? 0 : -2}px`};\n`;\n\nconst PeriodeKnapp = styled.button<PeriodeInnholdProps>`\n    height: ${props => `${props.$kompakt ? 1.5 : 2}rem`};\n    cursor: pointer;\n\n    &.advarsel {\n        &:hover,\n        &.active,\n        &:focus {\n            background: #fed7a3;\n        }\n    }\n\n    &.feil {\n        &:hover,\n        &.active,\n        &:focus {\n            background: #e3b0a8;\n        }\n    }\n\n    &.inaktiv {\n        &:hover,\n        &.active,\n        &:focus {\n            background: #c3c3c3;\n        }\n    }\n\n    &.suksess {\n        &:hover,\n        &.active,\n        &:focus {\n            background: #9bd0b0;\n        }\n    }\n    ${fellesPeriodeStyle}\n`;\n\nconst PeriodeDiv = styled.div<PeriodeInnholdProps>`\n    height: ${props => `${props.$kompakt ? 1.5 : 2}rem`};\n    ${fellesPeriodeStyle}\n`;\n\ninterface NonClickablePeriodProps {\n    period: PositionedPeriod;\n    divRef: RefObject<HTMLDivElement>;\n    className?: string;\n    kompakt?: boolean;\n}\n\ninterface ClickablePeriodProps {\n    period: PositionedPeriod;\n    buttonRef: RefObject<HTMLButtonElement>;\n    onSelectPeriod: (period: PositionedPeriod) => void;\n    className?: string;\n    kompakt?: boolean;\n}\n\ninterface TimelinePeriodProps {\n    period: PositionedPeriod;\n    active?: boolean;\n    onSelectPeriod?: (period: PositionedPeriod) => void;\n    onHoverPeriod?: ReactNode;\n    kompakt?: boolean;\n}\n\nconst ariaLabel = (period: PositionedPeriod): string => {\n    const start = period.start.format('DD.MM.YYYY');\n    const end = period.endInclusive.format('DD.MM.YYYY');\n    return `${period.status} fra ${start} til og med ${end}`;\n};\n\nconst style = (period: PositionedPeriod): CSSProperties => ({\n    [period.direction]: `${period.horizontalPosition}%`,\n    width: `${period.width}%`,\n});\n\n// eslint-disable-next-line react/display-name\nconst ClickablePeriod = React.memo(\n    ({ buttonRef, period, className, onSelectPeriod, kompakt }: ClickablePeriodProps) => {\n        const [showHoverLabel, setShowHoverLabel] = useState(false);\n\n        const onClick = () => {\n            if (!period.disabled) {\n                onSelectPeriod?.(period);\n            }\n        };\n\n        const enableHoverLabel = () => {\n            // tslint:disable-next-line:no-unused-expression\n            period.hoverLabel && setShowHoverLabel(true);\n        };\n\n        const disableHoverLabel = () => {\n            // tslint:disable-next-line:no-unused-expression\n            period.hoverLabel && setShowHoverLabel(false);\n        };\n\n        return (\n            <PeriodeKnapp\n                $kompakt={kompakt}\n                ref={buttonRef}\n                className={className}\n                onClick={onClick}\n                onMouseEnter={enableHoverLabel}\n                onMouseLeave={disableHoverLabel}\n                aria-label={ariaLabel(period)}\n                style={style(period)}\n            >\n                {period.hoverLabel && showHoverLabel && <Tooltip>{period.hoverLabel}</Tooltip>}\n                {period.infoPin && <InfoPin $påPeriodeKnapp className={'infoPin'} />}\n                {period.children && (\n                    <PeriodeInnhold $kompakt={kompakt}>{period.children}</PeriodeInnhold>\n                )}\n            </PeriodeKnapp>\n        );\n    },\n);\n\nconst NonClickablePeriod = ({ divRef, period, className, kompakt }: NonClickablePeriodProps) => (\n    <PeriodeDiv\n        $kompakt={kompakt}\n        ref={divRef}\n        className={className}\n        aria-label={ariaLabel(period)}\n        style={style(period)}\n    >\n        {period.infoPin && <InfoPin className={'infoPin'} />}\n        {period.children && <PeriodeInnhold $kompakt={kompakt}>{period.children}</PeriodeInnhold>}\n    </PeriodeDiv>\n);\n\nconst finnClassnames = (\n    period: PositionedPeriod,\n    active: boolean | undefined,\n    isMini: boolean,\n): string[] => {\n    const newClassNames: string[] = [];\n\n    switch (period.cropped) {\n        case 'both':\n            newClassNames.push('croppedBegge');\n            break;\n        case 'left':\n            if (period.direction === 'left') {\n                newClassNames.push('croppedVenstre');\n            } else {\n                newClassNames.push('croppedHøyre');\n            }\n            break;\n        case 'right':\n            if (period.direction === 'left') {\n                newClassNames.push('croppedHøyre');\n            } else {\n                newClassNames.push('croppedVenstre');\n            }\n            break;\n        default:\n            break;\n    }\n\n    switch (period.connectingEdge) {\n        case 'both':\n            newClassNames.push('sammenhengendeFraBegge');\n            break;\n        case 'left':\n            if (period.direction === 'left') {\n                newClassNames.push('sammenhengendeFraVenstre');\n            } else {\n                newClassNames.push('sammenhengendeFraHøyre');\n            }\n            break;\n        case 'right':\n            if (period.direction === 'left') {\n                newClassNames.push('sammenhengendeFraHøyre');\n            } else {\n                newClassNames.push('sammenhengendeFraVenstre');\n            }\n            break;\n        default:\n            break;\n    }\n\n    if (active) {\n        newClassNames.push('active');\n    }\n    if (isMini) {\n        newClassNames.push('mini');\n    }\n\n    return newClassNames;\n};\n\n// eslint-disable-next-line react/display-name\nexport const TimelinePeriod = React.memo(\n    ({ period, onSelectPeriod, active, kompakt }: TimelinePeriodProps) => {\n        const ref = useRef<HTMLButtonElement | HTMLDivElement>(null);\n        const [isMini, setIsMini] = useState(false);\n\n        const className = classNames(\n            'periode',\n            finnClassnames(period, active, isMini),\n            period.status,\n            period.className,\n        );\n        useLayoutEffect(() => {\n            const currentWidth = ref.current?.offsetWidth;\n            if (currentWidth && currentWidth < 30) {\n                setIsMini(true);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [ref.current]);\n\n        return onSelectPeriod ? (\n            <ClickablePeriod\n                buttonRef={ref as RefObject<HTMLButtonElement>}\n                period={period}\n                onSelectPeriod={onSelectPeriod}\n                className={className}\n                kompakt={kompakt}\n            />\n        ) : (\n            <NonClickablePeriod\n                divRef={ref as RefObject<HTMLDivElement>}\n                period={period}\n                className={className}\n                kompakt={kompakt}\n            />\n        );\n    },\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { TimelinePeriod } from './TimelinePeriod';\nimport { PositionedPeriod } from '../types.internal';\nimport { ABlue50, AGray50, ASpacing4, ASpacing6, ASpacing8 } from '@navikt/ds-tokens/dist/tokens';\n\ninterface TimelineRowStyleProps {\n    $kompakt?: boolean;\n}\n\nconst TimelineRowStyle = styled.div<TimelineRowStyleProps>`\n    flex: 1;\n    height: ${props => `${props.$kompakt ? ASpacing6 : ASpacing8}`};\n    display: flex;\n    align-items: center;\n    position: relative;\n    margin-bottom: ${props => `${props.$kompakt ? ASpacing4 : ASpacing6}`};\n`;\n\nconst EmptyRowHr = styled.hr<TimelineRowStyleProps>`\n    flex: 1;\n    height: ${props => `${props.$kompakt ? ASpacing6 : ASpacing8}`};\n    width: 100%;\n    border: none;\n    background-color: ${AGray50};\n    margin-bottom: ${props => `${props.$kompakt ? ASpacing4 : ASpacing6}`};\n\n    &.aktivRad {\n        background-color: ${ABlue50};\n    }\n`;\n\ninterface EmptyTimelineRowProps {\n    active?: boolean;\n    kompakt?: boolean;\n    className: string;\n}\n\ninterface TimelineRowProps {\n    periods: PositionedPeriod[];\n    onSelectPeriod?: (periode: PositionedPeriod) => void;\n    active?: boolean;\n    kompakt?: boolean;\n    className: string;\n}\n\nexport const EmptyTimelineRow = ({\n    active = false,\n    kompakt = false,\n    className,\n}: EmptyTimelineRowProps) => (\n    <EmptyRowHr $kompakt={kompakt} className={classNames(active && 'aktivRad', className)} />\n);\n\nexport const TimelineRow = ({\n    periods,\n    onSelectPeriod,\n    active = false,\n    kompakt = false,\n    className,\n}: TimelineRowProps) => (\n    <TimelineRowStyle\n        $kompakt={kompakt}\n        className={classNames('tidslinjerad', active && 'aktivRad', className)}\n    >\n        {periods.map(period => (\n            <TimelinePeriod\n                key={period.id}\n                period={period}\n                onSelectPeriod={onSelectPeriod}\n                active={period.active}\n                kompakt={kompakt}\n            />\n        ))}\n    </TimelineRowStyle>\n);\n","import React, { useState } from 'react';\nimport { Pin } from '../types.external';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { position } from './calc';\nimport styled from 'styled-components';\nimport { Tooltip } from './Tooltip';\nimport { ARed500 } from '@navikt/ds-tokens/dist/tokens';\n\nconst StyledTooltip = styled(Tooltip)`\n    font-size: 0.8rem;\n    top: -10px;\n`;\n\nconst PinView = ({ render }: Partial<Pin>) => {\n    const [showRender, setShowRender] = useState(false);\n    return (\n        <PinStyle\n            className={'pin'}\n            onMouseOver={() => setShowRender(true)}\n            onMouseLeave={() => setShowRender(false)}\n        >\n            {showRender && render && <StyledTooltip className={'tooltip'}>{render}</StyledTooltip>}\n        </PinStyle>\n    );\n};\n\nconst PinsStyle = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n`;\n\nconst PinStyle = styled.div`\n    position: absolute;\n    height: calc(100% + 10px);\n    top: -22px;\n    width: 1px;\n    background: #000000;\n\n    &:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 18px;\n        height: 18px;\n        background: #ffffff;\n        border: 6px solid ${ARed500};\n        border-radius: 50%;\n        transform: translate(-8.5px, -9.5px);\n    }\n`;\n\nconst PinContainer = styled.span`\n    position: absolute;\n    height: 100%;\n`;\n\ninterface PinsProps {\n    pins: Pin[];\n    start: Dayjs;\n    slutt: Dayjs;\n    direction: 'left' | 'right';\n}\n\nexport const Pins = ({ pins, start, slutt, direction }: PinsProps) => (\n    <PinsStyle className={'pins'}>\n        {pins.map(({ date, render }, i) => (\n            <PinContainer\n                key={i}\n                className={'container'}\n                style={{ [direction]: `${position(dayjs(date), start, slutt)}%` }}\n            >\n                <PinView render={render} />\n            </PinContainer>\n        ))}\n    </PinsStyle>\n);\n","import React, { ReactNode, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Dayjs } from 'dayjs';\nimport styled from 'styled-components';\nimport { AktivtUtsnittBakgrunn, AktivtUtsnittBorder } from './AktivtUtsnitt';\nimport { AxisLabels } from './AxisLabels';\nimport { EmptyTimelineRow, TimelineRow } from './TimelineRow';\nimport { EnkelPeriode, Etikett, Periode, Pin } from '../types.external';\nimport { AxisLabel, InternalSimpleTimeline, PositionedPeriod } from '../types.internal';\nimport { useSenesteDato, useTidligsteDato, useTidslinjerader } from './useTidslinjerader';\nimport { Pins } from './Pins';\nimport { ASpacing3, ASpacing4 } from '@navikt/ds-tokens/dist/tokens';\n\nexport interface TidslinjeProps {\n    /**\n     * Perioder som rendres på tidslinjen. Rendres som 'button' dersom 'onSelectPeriode' er satt, ellers som en 'div'.\n     * Hver liste av `Periode`-objekter representerer en egen rad i tidslinjen.\n     */\n    rader: Periode[][];\n    /**\n     * Bestemmer startpunktet for tidslinjen. Defaulter til tidligste dato blandt alle perioder i tidslinjen.\n     */\n    startDato?: Date;\n    /**\n     * Bestemmer sluttpunktet for tidslinjen. Defaulter til seneste dato blandt alle perioder i tidslinjen.\n     */\n    sluttDato?: Date;\n    /**\n     * Handling som skal skje når en bruker klikker på/interagerer med en periodeknapp.\n     */\n    onSelectPeriode?: (periode: Periode) => void;\n    /**\n     * Utsnittet av tidslinjen som skal markeres som aktivt.\n     */\n    aktivtUtsnitt?: EnkelPeriode;\n    /**\n     * Raden som skal markeres som aktiv.\n     */\n    aktivRad?: number;\n    /**\n     * Retningen periodene sorteres på. Default er 'stigende', hvor tidligste periode da vil rendres til venstre i\n     * tidslinjen og seneste periode vil rendres til høyre.\n     */\n    retning?: 'stigende' | 'synkende';\n    /**\n     * Funksjon som tar en etikett og returnerer det som skal rendres.\n     */\n    etikettRender?: (etikett: Etikett) => ReactNode;\n    /**\n     * Markeringer for enkeltdager på tidslinjen.\n     */\n    pins?: Pin[];\n    /**\n     * Bruke kompakt style, med smalere stolper og uten margin.\n     */\n    kompakt?: boolean;\n}\n\nconst TidslinjeStyle = styled.div`\n    position: relative;\n    padding: ${ASpacing3} 0;\n    margin: 0 ${ASpacing4};\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n`;\n\ninterface TidslinjeRadStyleProps {\n    $kompakt?: boolean;\n}\nconst TidslinjeRadStyle = styled.div<TidslinjeRadStyleProps>`\n    position: relative;\n    padding: 0;\n    border-top: ${props => `${props.$kompakt ? 'none' : '1px solid #e7e9e9'}`};\n\n    .tidslinjerad.førsterad,\n    hr.førsterad {\n        margin-top: ${props => `${props.$kompakt ? '0rem' : '1.56rem'}`};\n    }\n`;\n\nconst EmptyRowsStyle = styled.div`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n`;\n\nexport interface TimelineProps {\n    rows: InternalSimpleTimeline[];\n    start: Dayjs;\n    direction: 'left' | 'right';\n    endInclusive: Dayjs;\n    activeRow?: number;\n    aktivtUtsnitt?: EnkelPeriode;\n    onSelectPeriod?: (periode: Periode) => void;\n    axisLabelRenderer?: (etikett: AxisLabel) => ReactNode;\n    pins?: Pin[];\n    kompakt?: boolean;\n}\n\n// eslint-disable-next-line react/display-name\nconst Timeline = React.memo(\n    ({\n        pins,\n        rows,\n        start,\n        endInclusive,\n        onSelectPeriod,\n        aktivtUtsnitt,\n        activeRow,\n        direction,\n        axisLabelRenderer,\n        kompakt = false,\n    }: TimelineProps) => {\n        const onSelectPeriodeWrapper =\n            onSelectPeriod &&\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useCallback(\n                (periode: PositionedPeriod) => {\n                    onSelectPeriod?.({\n                        id: periode.id,\n                        fom: periode.start.toDate(),\n                        tom: periode.endInclusive.toDate(),\n                        disabled: periode.disabled,\n                        status: periode.status,\n                    });\n                },\n                [onSelectPeriod],\n            );\n\n        return (\n            <TidslinjeStyle className={classNames('tidslinje')}>\n                <AxisLabels\n                    start={start}\n                    slutt={endInclusive}\n                    direction={direction}\n                    etikettRender={axisLabelRenderer}\n                />\n                <TidslinjeRadStyle $kompakt={kompakt} className={classNames('tidslinjerader')}>\n                    <EmptyRowsStyle>\n                        {rows.map((_, i) => (\n                            <EmptyTimelineRow\n                                kompakt={kompakt}\n                                className={classNames(i === 0 && 'førsterad')}\n                                key={i}\n                                active={i === activeRow}\n                            />\n                        ))}\n                    </EmptyRowsStyle>\n                    {pins && (\n                        <Pins\n                            pins={pins}\n                            start={start}\n                            slutt={endInclusive}\n                            direction={direction}\n                        />\n                    )}\n                    {aktivtUtsnitt && (\n                        <AktivtUtsnittBakgrunn\n                            tidslinjestart={start}\n                            tidslinjeslutt={endInclusive}\n                            aktivtUtsnitt={aktivtUtsnitt}\n                            direction={direction}\n                        />\n                    )}\n                    {rows.map((tidslinje, i) => (\n                        <TimelineRow\n                            key={tidslinje.id}\n                            className={classNames(i === 0 && 'førsterad')}\n                            {...tidslinje}\n                            onSelectPeriod={onSelectPeriodeWrapper}\n                            active={i === activeRow}\n                            kompakt={kompakt}\n                        />\n                    ))}\n                    {aktivtUtsnitt && (\n                        <AktivtUtsnittBorder\n                            tidslinjestart={start}\n                            tidslinjeslutt={endInclusive}\n                            aktivtUtsnitt={aktivtUtsnitt}\n                            direction={direction}\n                        />\n                    )}\n                </TidslinjeRadStyle>\n            </TidslinjeStyle>\n        );\n    },\n);\n\n/**\n * Viser perioder i en tidslinje.\n */\n// eslint-disable-next-line react/display-name\nexport const Tidslinje = React.memo(\n    ({\n        pins,\n        rader,\n        aktivRad,\n        startDato,\n        sluttDato,\n        etikettRender,\n        onSelectPeriode,\n        aktivtUtsnitt,\n        retning = 'stigende',\n        kompakt = false,\n    }: TidslinjeProps) => {\n        if (!rader) throw new Error('Tidslinjen mangler rader.');\n\n        const direction = retning === 'stigende' ? 'left' : 'right';\n        const start = useTidligsteDato({ startDato, rader }).startOf('day');\n        const endInclusive = useSenesteDato({ sluttDato, rader }).endOf('day');\n        const rows = useTidslinjerader(rader, start, endInclusive, direction);\n\n        return (\n            <Timeline\n                rows={rows}\n                start={start}\n                activeRow={aktivRad}\n                direction={direction}\n                endInclusive={endInclusive}\n                onSelectPeriod={onSelectPeriode}\n                aktivtUtsnitt={aktivtUtsnitt}\n                axisLabelRenderer={etikettRender}\n                pins={pins}\n                kompakt={kompakt}\n            />\n        );\n    },\n);\n"],"names":[],"sourceRoot":""}