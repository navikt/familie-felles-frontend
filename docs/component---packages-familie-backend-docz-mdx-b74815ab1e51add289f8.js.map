{"version":3,"sources":["webpack:///../packages/familie-backend/docz.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,+MAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,8yC,0MA6CTJ,EAAWK,gBAAiB","file":"component---packages-familie-backend-docz-mdx-b74815ab1e51add289f8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/henninghaakonsen/nav/familie/familie-felles-frontend/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Node.js backend med express for familie frontend apper.\nSetter opp en express app med azure autentisering og logging.\nKan konfigureres til å bruke redis gjennom egen konfigurasjon.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const passportConfig: IOIDCStrategyOptionWithRequest = se interface i oidc-strategy.d.ts\nconst sessionConfig: ISessionKonfigurasjon = {\n    cookieSecret: string | string[],\n    navn: string,\n    redisPassord?: string;\n    redisUrl?: string; // Settes denne prøver modulen å koble seg til redis\n    secret?: boolean; // Settes til true dersom man aktiverer secret flagget på sesjonen\n    sessionMaxAgeSekunder?: number;\n    sessionSecret: string | string[],\n};\n\nexport const saksbehandlerTokenConfig: ITokenRequest = {\n    clientId: '<applikasjon_id fra aad app>',\n    clientSecret: '<SECRET fra aad app>',\n    redirectUrl: redirectUrl,\n    scope: \\`\\${'<applikasjon_id fra aad app>'}/.default\\`,\n    tokenUri: tokenURI,\n};\n\nexport const oboTokenConfig: ITokenRequest = {\n    clientId: '<applikasjon_id fra aad app>',\n    clientSecret: '<SECRET fra aad app>',\n    redirectUrl: redirectUrl,\n    scope: 'scope mot backend tjenesten',\n    tokenUri: tokenURI,\n};\n\nconst backend = new Backend(passportConfig, sessionConfig, saksbehandlerTokenConfig);\n\n// Brukes videre f.eks. slik til å sette opp proxy mot backend\nbackend\n    .getApp()\n    .use(\n        'proxyUrl',\n        backend.ensureAuthenticated(true, saksbehandlerTokenConfig),\n        attachToken(backend),\n        doProxy()\n    );\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}